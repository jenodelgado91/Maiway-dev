{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\maipc3\\\\Desktop\\\\branchfor2live\\\\maiway-dev\\\\src\\\\components\\\\commons\\\\DataList2.tsx\";\nimport React, { createRef } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport { MenuItem, Select } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"100%\"\n  },\n  bottom: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    alignItems: \"center\"\n  },\n  customButton2: {\n    width: \"6vw\",\n    minWidth: \"40px\",\n    height: \"3vh\",\n    marginLeft: theme.spacing(1)\n  }\n}));\nlet lastHeight = 0;\n\nfunction DataList2({\n  columns,\n  rows,\n  rowClick,\n  selectedID,\n  maxHeight,\n  page,\n  rowsPerPage,\n  commonList,\n  searchNextClick\n}) {\n  const classes = useStyles();\n  const {\n    t\n  } = useTranslation();\n  const tableRef = createRef(); // const [lastHeight, setLastHeight] = useState(0);\n  // const nextOnClick = () => {\n  //   // console.log(\"next\");\n  //   searchNextClick();\n  // };\n  // console.log(page);\n\n  if (page === 0) {\n    lastHeight = 0;\n  }\n\n  const handleScroll = ev => {\n    // console.log(ev.currentTarget.scrollHeight - ev.currentTarget.clientHeight);\n    // console.log(ev.currentTarget.scrollTop);\n    const totalHeight = ev.currentTarget.scrollHeight - ev.currentTarget.clientHeight;\n    const currentHeight = ev.currentTarget.scrollTop;\n    const isEnd = rows.length % rowsPerPage;\n\n    if (totalHeight === currentHeight && totalHeight > lastHeight && isEnd === 0) {\n      // console.log(totalHeight, currentHeight, lastHeight);\n      lastHeight = currentHeight;\n      searchNextClick();\n    }\n  }; // useEffect(() => {\n  //   tableRef.current.scrollTop = 0;\n  // }, [rows]);\n\n\n  return /*#__PURE__*/React.createElement(Paper, {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TableContainer, {\n    style: {\n      height: `${maxHeight}px`,\n      overflowY: \"auto\"\n    },\n    onScroll: handleScroll,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    stickyHeader: true,\n    \"aria-label\": \"sticky table\",\n    ref: tableRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, columns.map(column => /*#__PURE__*/React.createElement(TableCell, {\n    key: column.id,\n    align: column.align,\n    style: {\n      minWidth: column.minWidth\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, column.label)))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, rows // .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n  .map((row, rowIdx) => {\n    return /*#__PURE__*/React.createElement(TableRow, {\n      hover: true,\n      tabIndex: -1,\n      key: row.key,\n      onClick: () => rowClick(row),\n      selected: selectedID === row.key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 19\n      }\n    }, columns.map((column, colIdx) => {\n      let value = row[column.id];\n\n      if (colIdx === 0) {\n        value = rowIdx + 1;\n      }\n\n      return /*#__PURE__*/React.createElement(TableCell, {\n        key: column.id,\n        align: column.align,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 25\n        }\n      }, column.type ? /*#__PURE__*/React.createElement(Select, {\n        labelId: \"demo-simple-select-outlined-label\",\n        fullWidth: true,\n        readOnly: true,\n        value: value,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 29\n        }\n      }, commonList && commonList[column.selectList].map(row => /*#__PURE__*/React.createElement(MenuItem, {\n        key: row.key,\n        value: row[column.selectCdNm[0]],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 37\n        }\n      }, row[column.selectCdNm[1]]))) : /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          maxWidth: column.maxWidth,\n          overflow: \"hidden\",\n          textOverflow: \"ellipsis\",\n          whiteSpace: \"nowrap\",\n          display: \"block\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 29\n        }\n      }, column.format && typeof value === \"number\" ? column.format(value) : value));\n    }));\n  })))));\n}\n\nexport default DataList2;","map":{"version":3,"sources":["C:/Users/maipc3/Desktop/branchfor2live/maiway-dev/src/components/commons/DataList2.tsx"],"names":["React","createRef","makeStyles","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","MenuItem","Select","useTranslation","useStyles","theme","root","width","bottom","display","justifyContent","alignItems","customButton2","minWidth","height","marginLeft","spacing","lastHeight","DataList2","columns","rows","rowClick","selectedID","maxHeight","page","rowsPerPage","commonList","searchNextClick","classes","t","tableRef","handleScroll","ev","totalHeight","currentTarget","scrollHeight","clientHeight","currentHeight","scrollTop","isEnd","length","overflowY","map","column","id","align","label","row","rowIdx","key","colIdx","value","type","selectList","selectCdNm","maxWidth","overflow","textOverflow","whiteSpace","format"],"mappings":"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","sourcesContent":["import React, { createRef, useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport { Button, CardContent, MenuItem, Select } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  bottom: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    alignItems: \"center\",\n  },\n  customButton2: {\n    width: \"6vw\",\n    minWidth: \"40px\",\n    height: \"3vh\",\n    marginLeft: theme.spacing(1),\n  },\n}));\nlet lastHeight = 0;\nfunction DataList2({\n  columns,\n  rows,\n  rowClick,\n  selectedID,\n  maxHeight,\n  page,\n  rowsPerPage,\n  commonList,\n  searchNextClick,\n}: any) {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const tableRef = createRef<any>();\n\n  // const [lastHeight, setLastHeight] = useState(0);\n  // const nextOnClick = () => {\n  //   // console.log(\"next\");\n  //   searchNextClick();\n  // };\n  // console.log(page);\n\n  if (page === 0) {\n    lastHeight = 0;\n  }\n  const handleScroll = (ev: React.UIEvent<HTMLDivElement, UIEvent>) => {\n    // console.log(ev.currentTarget.scrollHeight - ev.currentTarget.clientHeight);\n    // console.log(ev.currentTarget.scrollTop);\n    const totalHeight =\n      ev.currentTarget.scrollHeight - ev.currentTarget.clientHeight;\n    const currentHeight = ev.currentTarget.scrollTop;\n    const isEnd = rows.length % rowsPerPage;\n    if (\n      totalHeight === currentHeight &&\n      totalHeight > lastHeight &&\n      isEnd === 0\n    ) {\n      // console.log(totalHeight, currentHeight, lastHeight);\n      lastHeight = currentHeight;\n      searchNextClick();\n    }\n  };\n\n  // useEffect(() => {\n  //   tableRef.current.scrollTop = 0;\n  // }, [rows]);\n  return (\n    <Paper className={classes.root}>\n      <TableContainer\n        style={{ height: `${maxHeight}px`, overflowY: \"auto\" }}\n        onScroll={handleScroll}\n      >\n        <Table stickyHeader aria-label=\"sticky table\" ref={tableRef}>\n          <TableHead>\n            <TableRow>\n              {columns.map((column: any) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows\n              // .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n              .map((row: any, rowIdx: number) => {\n                return (\n                  <TableRow\n                    hover\n                    tabIndex={-1}\n                    key={row.key}\n                    onClick={() => rowClick(row)}\n                    selected={selectedID === row.key}\n                  >\n                    {columns.map((column: any, colIdx: number) => {\n                      let value = row[column.id];\n                      if (colIdx === 0) {\n                        value = rowIdx + 1;\n                      }\n                      return (\n                        <TableCell key={column.id} align={column.align}>\n                          {column.type ? (\n                            <Select\n                              labelId=\"demo-simple-select-outlined-label\"\n                              fullWidth\n                              readOnly\n                              value={value}\n                            >\n                              {commonList &&\n                                commonList[column.selectList].map(\n                                  (row: any) => (\n                                    <MenuItem\n                                      key={row.key}\n                                      value={row[column.selectCdNm[0]]}\n                                    >\n                                      {row[column.selectCdNm[1]]}\n                                    </MenuItem>\n                                  )\n                                )}\n                            </Select>\n                          ) : (\n                            <div\n                              style={{\n                                maxWidth: column.maxWidth,\n                                overflow: \"hidden\",\n                                textOverflow: \"ellipsis\",\n                                whiteSpace: \"nowrap\",\n                                display: \"block\",\n                              }}\n                            >\n                              {column.format && typeof value === \"number\"\n                                ? column.format(value)\n                                : value}\n                            </div>\n                          )}\n                        </TableCell>\n                      );\n                    })}\n                  </TableRow>\n                );\n              })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      {/* <CardContent>\n        <div className={classes.bottom}>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            className={classes.customButton2}\n            onClick={nextOnClick}\n          >\n            {t(\"Next\")}\n          </Button>\n        </div>\n      </CardContent> */}\n    </Paper>\n  );\n}\n\nexport default DataList2;\n"]},"metadata":{},"sourceType":"module"}