{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\maipc3\\\\Desktop\\\\branchfor2live\\\\maiway-dev\\\\src\\\\components\\\\commons\\\\DataList.tsx\";\nimport React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport { MenuItem, Select } from \"@material-ui/core\";\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\"\n  }\n});\n\nfunction DataList({\n  columns,\n  rows,\n  rowClick,\n  selectedID,\n  maxHeight,\n  search,\n  isFresh,\n  page,\n  rowsPerPage,\n  setPage,\n  setRowsPerPage,\n  commonList\n}) {\n  var _rows$;\n\n  const classes = useStyles(); // useEffect(() => {\n  //   console.log(\"dfdfdf\");\n  //   // if (page > 0) {\n  //   const searchT = async () =>\n  //     await search(rowsPerPage * page + 1, rowsPerPage);\n  //   searchT();\n  //   // }\n  // }, [page, rowsPerPage]);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  return /*#__PURE__*/React.createElement(Paper, {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TableContainer, {\n    style: {\n      maxHeight: maxHeight\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    stickyHeader: true,\n    \"aria-label\": \"sticky table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, columns.map(column => /*#__PURE__*/React.createElement(TableCell, {\n    key: column.id,\n    align: column.align,\n    style: {\n      minWidth: column.minWidth\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, column.label)))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, rows // .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n  .map((row, rowIdx) => {\n    return /*#__PURE__*/React.createElement(TableRow, {\n      hover: true,\n      tabIndex: -1,\n      key: row.key,\n      onClick: () => rowClick(row),\n      selected: selectedID === row.key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 19\n      }\n    }, columns.map((column, colIdx) => {\n      let value = row[column.id];\n\n      if (colIdx === 0) {\n        value = page * rowsPerPage + rowIdx + 1;\n      }\n\n      return /*#__PURE__*/React.createElement(TableCell, {\n        key: column.id,\n        align: column.align,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }\n      }, column.type ? /*#__PURE__*/React.createElement(Select, {\n        labelId: \"demo-simple-select-outlined-label\",\n        fullWidth: true,\n        readOnly: true,\n        value: value,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 29\n        }\n      }, commonList && commonList[column.selectList].map(row => /*#__PURE__*/React.createElement(MenuItem, {\n        key: row.key,\n        value: row[column.selectCdNm[0]],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 37\n        }\n      }, row[column.selectCdNm[1]]))) : /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          maxWidth: column.maxWidth,\n          overflow: \"hidden\",\n          textOverflow: \"ellipsis\",\n          whiteSpace: \"nowrap\",\n          display: \"block\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 29\n        }\n      }, column.format && typeof value === \"number\" ? column.format(value) : value));\n    }));\n  })))), /*#__PURE__*/React.createElement(TablePagination, {\n    rowsPerPageOptions: [10, 25, 100],\n    component: \"div\",\n    count: ((_rows$ = rows[0]) === null || _rows$ === void 0 ? void 0 : _rows$.totalCount) || 0,\n    rowsPerPage: rowsPerPage,\n    page: page,\n    onChangePage: handleChangePage,\n    onChangeRowsPerPage: handleChangeRowsPerPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default DataList;","map":{"version":3,"sources":["C:/Users/maipc3/Desktop/branchfor2live/maiway-dev/src/components/commons/DataList.tsx"],"names":["React","makeStyles","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","MenuItem","Select","useStyles","root","width","DataList","columns","rows","rowClick","selectedID","maxHeight","search","isFresh","page","rowsPerPage","setPage","setRowsPerPage","commonList","classes","handleChangePage","event","newPage","handleChangeRowsPerPage","target","value","map","column","id","align","minWidth","label","row","rowIdx","key","colIdx","type","selectList","selectCdNm","maxWidth","overflow","textOverflow","whiteSpace","display","format","totalCount"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport { MenuItem, Select } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\",\n  },\n});\n\nfunction DataList({\n  columns,\n  rows,\n  rowClick,\n  selectedID,\n  maxHeight,\n  search,\n  isFresh,\n  page,\n  rowsPerPage,\n  setPage,\n  setRowsPerPage,\n  commonList,\n}: any) {\n  const classes = useStyles();\n\n  // useEffect(() => {\n  //   console.log(\"dfdfdf\");\n  //   // if (page > 0) {\n  //   const searchT = async () =>\n  //     await search(rowsPerPage * page + 1, rowsPerPage);\n\n  //   searchT();\n  //   // }\n  // }, [page, rowsPerPage]);\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  return (\n    <Paper className={classes.root}>\n      <TableContainer style={{ maxHeight: maxHeight }}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              {columns.map((column: any) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows\n              // .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n              .map((row: any, rowIdx: number) => {\n                return (\n                  <TableRow\n                    hover\n                    tabIndex={-1}\n                    key={row.key}\n                    onClick={() => rowClick(row)}\n                    selected={selectedID === row.key}\n                  >\n                    {columns.map((column: any, colIdx: number) => {\n                      let value = row[column.id];\n                      if (colIdx === 0) {\n                        value = page * rowsPerPage + rowIdx + 1;\n                      }\n                      return (\n                        <TableCell key={column.id} align={column.align}>\n                          {column.type ? (\n                            <Select\n                              labelId=\"demo-simple-select-outlined-label\"\n                              fullWidth\n                              readOnly\n                              value={value}\n                            >\n                              {commonList &&\n                                commonList[column.selectList].map(\n                                  (row: any) => (\n                                    <MenuItem\n                                      key={row.key}\n                                      value={row[column.selectCdNm[0]]}\n                                    >\n                                      {row[column.selectCdNm[1]]}\n                                    </MenuItem>\n                                  )\n                                )}\n                            </Select>\n                          ) : (\n                            <div\n                              style={{\n                                maxWidth: column.maxWidth,\n                                overflow: \"hidden\",\n                                textOverflow: \"ellipsis\",\n                                whiteSpace: \"nowrap\",\n                                display: \"block\",\n                              }}\n                            >\n                              {column.format && typeof value === \"number\"\n                                ? column.format(value)\n                                : value}\n                            </div>\n                          )}\n                        </TableCell>\n                      );\n                    })}\n                  </TableRow>\n                );\n              })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        count={rows[0]?.totalCount || 0}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n    </Paper>\n  );\n}\n\nexport default DataList;\n"]},"metadata":{},"sourceType":"module"}