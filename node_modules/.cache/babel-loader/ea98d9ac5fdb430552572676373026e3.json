{"ast":null,"code":"import { FQsearchpage } from \"../fQuery\";\nconst LOADING_PLACES = \"LOADING_PLACES\";\nconst SEARCH_PLACES = \"SEARCH_PLACES\";\nconst UPDATE_PLACES = \"UPDATE_PLACES\";\nconst FAIL_PLACES = \"FAIL_PLACES\"; // const queryAction = <T extends {}>(data: T) => ({\n//   type: QUERY,\n//   payload: data,\n// });\n// action type\n\nconst loadingPlacesAction = startPage => ({\n  type: LOADING_PLACES,\n  payload: startPage\n});\n\nconst searchPlacesAction = data => ({\n  type: SEARCH_PLACES,\n  payload: data\n});\n\nconst updatePlacesAction = data => ({\n  type: UPDATE_PLACES,\n  payload: data\n});\n\nconst failPlacesAction = () => ({\n  type: FAIL_PLACES,\n  payload: \"\"\n});\n\n// search action\nexport const searchPlacesRequest = params => {\n  return async dispatch => {\n    dispatch(loadingPlacesAction(params.startPage));\n\n    try {\n      // const result = await axios.get(\"/api/fstore/searchpage\", {\n      //   params,\n      // });\n      const result = await FQsearchpage(params);\n      dispatch(searchPlacesAction(result));\n    } catch (e) {\n      dispatch(failPlacesAction());\n    }\n  };\n};\nexport const updatePage = params => {\n  return dispatch => {\n    dispatch(updatePlacesAction(params));\n  };\n};\nconst initState = {\n  status: \"\",\n  rowData: null,\n  comRowData: null\n}; // reducer\n\nconst placesReducer = (state = initState, action) => {\n  var _state$rowData;\n\n  switch (action.type) {\n    case LOADING_PLACES:\n      return {\n        status: \"WAITING\",\n        rowData: action.payload === 0 ? null : state.rowData\n      };\n\n    case SEARCH_PLACES:\n      return {\n        status: \"SUCCESS\",\n        rowData: state.rowData && [...state.rowData, ...action.payload] || action.payload\n      };\n\n    case UPDATE_PLACES:\n      return {\n        status: \"SUCCESS\",\n        rowData: (_state$rowData = state.rowData) === null || _state$rowData === void 0 ? void 0 : _state$rowData.map(row => {\n          let newRow = {};\n\n          if (row.key === action.payload.key) {\n            // console.log(\"row.key\");\n            newRow = { ...row,\n              ...action.payload\n            };\n          } else {\n            newRow = { ...row\n            };\n          }\n\n          return newRow;\n        })\n      };\n\n    case FAIL_PLACES:\n      return {\n        status: \"FAILURE\"\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default placesReducer;","map":{"version":3,"sources":["C:/Users/maipc3/Desktop/branchfor2live/maiway-dev/src/store/placesReducer.tsx"],"names":["FQsearchpage","LOADING_PLACES","SEARCH_PLACES","UPDATE_PLACES","FAIL_PLACES","loadingPlacesAction","startPage","type","payload","searchPlacesAction","data","updatePlacesAction","failPlacesAction","searchPlacesRequest","params","dispatch","result","e","updatePage","initState","status","rowData","comRowData","placesReducer","state","action","map","row","newRow","key"],"mappings":"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","sourcesContent":["import { FQsearchpage } from \"../fQuery\";\n\nconst LOADING_PLACES = \"LOADING_PLACES\";\nconst SEARCH_PLACES = \"SEARCH_PLACES\";\nconst UPDATE_PLACES = \"UPDATE_PLACES\";\nconst FAIL_PLACES = \"FAIL_PLACES\";\n\n// const queryAction = <T extends {}>(data: T) => ({\n//   type: QUERY,\n//   payload: data,\n// });\n// action type\nconst loadingPlacesAction = (startPage: number) => ({\n  type: LOADING_PLACES,\n  payload: startPage,\n});\n\nconst searchPlacesAction = (data: any) => ({\n  type: SEARCH_PLACES,\n  payload: data,\n});\nconst updatePlacesAction = (data: any) => ({\n  type: UPDATE_PLACES,\n  payload: data,\n});\n\nconst failPlacesAction = () => ({\n  type: FAIL_PLACES,\n  payload: \"\",\n});\n\nexport type actionType =\n  | ReturnType<typeof loadingPlacesAction>\n  | ReturnType<typeof searchPlacesAction>\n  | ReturnType<typeof updatePlacesAction>\n  | ReturnType<typeof failPlacesAction>;\n\n// search action\nexport const searchPlacesRequest = (params: any) => {\n  return async (dispatch: any) => {\n    dispatch(loadingPlacesAction(params.startPage));\n    try {\n      // const result = await axios.get(\"/api/fstore/searchpage\", {\n      //   params,\n      // });\n      const result = await FQsearchpage(params);\n      dispatch(searchPlacesAction(result));\n    } catch (e) {\n      dispatch(failPlacesAction());\n    }\n  };\n};\n\nexport const updatePage = (params: any) => {\n  return (dispatch: any) => {\n    dispatch(updatePlacesAction(params));\n  };\n};\n\nexport interface StateProps {\n  status: string;\n  rowData?: any;\n  comRowData?: any;\n}\n\nconst initState: StateProps = {\n  status: \"\",\n  rowData: null,\n  comRowData: null,\n};\n\n// reducer\nconst placesReducer = (state = initState, action: actionType) => {\n  switch (action.type) {\n    case LOADING_PLACES:\n      return {\n        status: \"WAITING\",\n        rowData: action.payload === 0 ? null : state.rowData,\n      };\n    case SEARCH_PLACES:\n      return {\n        status: \"SUCCESS\",\n        rowData:\n          (state.rowData && [...state.rowData, ...action.payload]) ||\n          action.payload,\n      };\n    case UPDATE_PLACES:\n      return {\n        status: \"SUCCESS\",\n        rowData: state.rowData?.map((row: any) => {\n          let newRow = {};\n          if (row.key === action.payload.key) {\n            // console.log(\"row.key\");\n            newRow = { ...row, ...action.payload };\n          } else {\n            newRow = { ...row };\n          }\n          return newRow;\n        }),\n      };\n    case FAIL_PLACES:\n      return {\n        status: \"FAILURE\",\n      };\n    default:\n      return state;\n  }\n};\n\nexport default placesReducer;\n"]},"metadata":{},"sourceType":"module"}