{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\maipc3\\\\Desktop\\\\branchfor2live\\\\maiway-dev\\\\src\\\\components\\\\Settings\\\\Language.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport { Paper, InputLabel, Typography, Button, FormControl, Select, MenuItem } from \"@material-ui/core\";\nimport { Title, DraggableDialog } from \"../commons\";\nimport { connect } from \"react-redux\";\nimport { updateLangRequest } from \"../../store/languageReducer\";\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    \"& > *\": {\n      margin: theme.spacing(1),\n      width: theme.spacing(16)\n    }\n  },\n  paper: {\n    padding: theme.spacing(2),\n    width: \"100%\"\n  },\n  inputLabel: {\n    display: \"inline-block\",\n    marginLeft: theme.spacing(3)\n  },\n  typoBody: {\n    marginTop: theme.spacing(3)\n  },\n  buttonRoot: {\n    \"& > *\": {\n      margin: theme.spacing(1)\n    },\n    display: \"flex\",\n    justifyContent: \"center\"\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 160\n  }\n}));\nconst arrLanguage = [{\n  idx: 0,\n  lang_cd: \"EN\",\n  lang_nm: \"ENGLISH\"\n}, {\n  idx: 1,\n  lang_cd: \"FR\",\n  lang_nm: \"FRENCH\"\n}, {\n  idx: 2,\n  lang_cd: \"CN\",\n  lang_nm: \"CHINESE SIMPLIFIED\"\n}, {\n  idx: 3,\n  lang_cd: \"TC\",\n  lang_nm: \"CHINESE TRADITIONAL\"\n}, {\n  idx: 4,\n  lang_cd: \"JP\",\n  lang_nm: \"JAPANESE\"\n}, {\n  idx: 5,\n  lang_cd: \"KR\",\n  lang_nm: \"KOREAN\"\n}, {\n  idx: 6,\n  lang_cd: \"PH\",\n  lang_nm: \"PHILIPPINES/TAGALOG\"\n}];\n\nfunction Language({\n  updateLangRequest,\n  localLanguage\n}) {\n  const classes = useStyles();\n  const {\n    t,\n    i18n\n  } = useTranslation();\n  const [language, setLanguage] = useState(\"\");\n  const [openDialog, setOpenDialog] = useState(false);\n  useEffect(() => {\n    setLanguage(localLanguage.language);\n  }, []);\n  useEffect(() => {\n    i18n.changeLanguage(localLanguage.language);\n  }, [localLanguage]);\n  /**\n   * selectBox change language\n   */\n\n  const handleChange = event => {\n    setLanguage(event.target.value);\n  };\n  /**\n   * save language\n   */\n\n\n  const handleSaveLanguage = async () => {\n    handleCloseDialog();\n    updateLangRequest(language);\n  };\n  /**\n   * confirm 팝업 open\n   */\n\n\n  const handleClickOpenDialog = () => {\n    setOpenDialog(true);\n  };\n  /**\n   * confirm 팝업 close\n   */\n\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n  }; // console.log(i18n.language);\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, \"Change language\"), /*#__PURE__*/React.createElement(Paper, {\n    elevation: 3,\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    component: \"span\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, \"In use: \", t(`${localLanguage.language}`)), /*#__PURE__*/React.createElement(InputLabel, {\n    className: classes.inputLabel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.typoBody,\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, \"Currently, the language is \", t(`${localLanguage.language}`), \". if you wish to change the language, choose a language in dropdown and click Confirm.\"), /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    className: classes.formControl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    id: \"demo-simple-select-outlined-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, \"Language\"), /*#__PURE__*/React.createElement(Select, {\n    labelId: \"demo-simple-select-outlined-label\",\n    id: \"demo-simple-select-outlined\",\n    value: language,\n    onChange: handleChange,\n    label: \"language\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"em\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  }, \"None\")), arrLanguage.map(lang => /*#__PURE__*/React.createElement(MenuItem, {\n    key: lang.idx,\n    value: lang.lang_cd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }\n  }, lang.lang_nm)))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.buttonRoot,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleClickOpenDialog,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }, \"Confirm\"), /*#__PURE__*/React.createElement(DraggableDialog, {\n    handleCloseDialog: handleCloseDialog,\n    openDialog: openDialog,\n    handleYesDialog: handleSaveLanguage,\n    alertTitle: \"Change language\",\n    alertMsg: t(\"change language?\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  })));\n}\n\nfunction mapStateToProps(state) {\n  return {\n    localLanguage: state.languageReducer\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    updateLangRequest: language => dispatch(updateLangRequest(language))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Language);","map":{"version":3,"sources":["C:/Users/maipc3/Desktop/branchfor2live/maiway-dev/src/components/Settings/Language.tsx"],"names":["React","useState","useEffect","useTranslation","createStyles","makeStyles","Paper","InputLabel","Typography","Button","FormControl","Select","MenuItem","Title","DraggableDialog","connect","updateLangRequest","useStyles","theme","root","display","flexWrap","margin","spacing","width","paper","padding","inputLabel","marginLeft","typoBody","marginTop","buttonRoot","justifyContent","formControl","minWidth","arrLanguage","idx","lang_cd","lang_nm","Language","localLanguage","classes","t","i18n","language","setLanguage","openDialog","setOpenDialog","changeLanguage","handleChange","event","target","value","handleSaveLanguage","handleCloseDialog","handleClickOpenDialog","map","lang","mapStateToProps","state","languageReducer","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Theme, createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Paper,\n  InputLabel,\n  Typography,\n  Button,\n  FormControl,\n  Select,\n  MenuItem,\n} from \"@material-ui/core\";\nimport { Title, DraggableDialog } from \"../commons\";\nimport { connect } from \"react-redux\";\nimport { updateLangRequest } from \"../../store/languageReducer\";\nimport { rootState } from \"../../store\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      \"& > *\": {\n        margin: theme.spacing(1),\n        width: theme.spacing(16),\n      },\n    },\n    paper: {\n      padding: theme.spacing(2),\n      width: \"100%\",\n    },\n    inputLabel: {\n      display: \"inline-block\",\n      marginLeft: theme.spacing(3),\n    },\n    typoBody: {\n      marginTop: theme.spacing(3),\n    },\n    buttonRoot: {\n      \"& > *\": {\n        margin: theme.spacing(1),\n      },\n      display: \"flex\",\n      justifyContent: \"center\",\n    },\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 160,\n    },\n  })\n);\n\ninterface languageProps {\n  idx: number;\n  lang_cd: \"EN\" | \"FR\" | \"CN\" | \"TC\" | \"JP\" | \"KR\" | \"PH\";\n  lang_nm: string;\n}\nconst arrLanguage: languageProps[] = [\n  { idx: 0, lang_cd: \"EN\", lang_nm: \"ENGLISH\" },\n  { idx: 1, lang_cd: \"FR\", lang_nm: \"FRENCH\" },\n  { idx: 2, lang_cd: \"CN\", lang_nm: \"CHINESE SIMPLIFIED\" },\n  { idx: 3, lang_cd: \"TC\", lang_nm: \"CHINESE TRADITIONAL\" },\n  { idx: 4, lang_cd: \"JP\", lang_nm: \"JAPANESE\" },\n  { idx: 5, lang_cd: \"KR\", lang_nm: \"KOREAN\" },\n  { idx: 6, lang_cd: \"PH\", lang_nm: \"PHILIPPINES/TAGALOG\" },\n];\n\nfunction Language({ updateLangRequest, localLanguage }: any) {\n  const classes = useStyles();\n  const { t, i18n } = useTranslation();\n  const [language, setLanguage] = useState(\"\");\n  const [openDialog, setOpenDialog] = useState(false);\n\n  useEffect(() => {\n    setLanguage(localLanguage.language);\n  }, []);\n\n  useEffect(() => {\n    i18n.changeLanguage(localLanguage.language);\n  }, [localLanguage]);\n\n  /**\n   * selectBox change language\n   */\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setLanguage(event.target.value as string);\n  };\n\n  /**\n   * save language\n   */\n  const handleSaveLanguage = async () => {\n    handleCloseDialog();\n    updateLangRequest(language);\n  };\n\n  /**\n   * confirm 팝업 open\n   */\n  const handleClickOpenDialog = () => {\n    setOpenDialog(true);\n  };\n\n  /**\n   * confirm 팝업 close\n   */\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n  };\n\n  // console.log(i18n.language);\n  return (\n    <>\n      <div className={classes.root}>\n        <Title>Change language</Title>\n        <Paper elevation={3} className={classes.paper}>\n          <Typography component={\"span\"}>\n            In use: {t(`${localLanguage.language}`)}\n          </Typography>\n          <InputLabel className={classes.inputLabel}>\n            {/* {cookies[\"maiway-language\"]} */}\n          </InputLabel>\n\n          <Typography className={classes.typoBody} variant=\"h6\">\n            Currently, the language is {t(`${localLanguage.language}`)}. if you\n            wish to change the language, choose a language in dropdown and click\n            Confirm.\n          </Typography>\n          <FormControl variant=\"outlined\" className={classes.formControl}>\n            <InputLabel id=\"demo-simple-select-outlined-label\">\n              Language\n            </InputLabel>\n            <Select\n              labelId=\"demo-simple-select-outlined-label\"\n              id=\"demo-simple-select-outlined\"\n              value={language}\n              onChange={handleChange}\n              label=\"language\"\n            >\n              <MenuItem value={\"\"}>\n                <em>None</em>\n              </MenuItem>\n              {arrLanguage.map((lang: languageProps) => (\n                <MenuItem key={lang.idx} value={lang.lang_cd}>\n                  {lang.lang_nm}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Paper>\n      </div>\n      <div className={classes.buttonRoot}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={handleClickOpenDialog}\n        >\n          Confirm\n        </Button>\n        <DraggableDialog\n          handleCloseDialog={handleCloseDialog}\n          openDialog={openDialog}\n          handleYesDialog={handleSaveLanguage}\n          alertTitle={\"Change language\"}\n          alertMsg={t(\"change language?\")}\n        />\n      </div>\n    </>\n  );\n}\n\nfunction mapStateToProps(state: rootState) {\n  return {\n    localLanguage: state.languageReducer,\n  };\n}\nfunction mapDispatchToProps(dispatch: any) {\n  return {\n    updateLangRequest: (language: string) =>\n      dispatch(updateLangRequest(language)),\n  };\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Language);\n"]},"metadata":{},"sourceType":"module"}