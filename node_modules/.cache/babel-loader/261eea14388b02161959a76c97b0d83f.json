{"ast":null,"code":"import { dbSvc } from \"./fBase\";\nimport { dbSvcProps, storageSvc } from \"./fBase\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst FQcheckUser = async uid => {\n  try {\n    let rows = [];\n    const snapshot = await dbSvc.collection(\"users\").where(\"uid\", \"==\", uid).get();\n    snapshot.forEach(doc => {\n      const childData = doc.data();\n      rows.push({ ...childData\n      });\n    });\n    return rows; //   handleSearchResponse(res, rows);\n  } catch (err) {\n    console.log(err);\n    return []; //   handleSearchResponse(res, null, error);\n  }\n}; // const FQcommon = async (doc: string) => {\n//   try {\n//     let rows = [];\n//     const snapshot = await dbSvc.collection(doc).get();\n//     snapshot.forEach((doc) => {\n//       const childData = doc.data();\n//       const id = doc.id;\n//       rows.push({ ...childData, key: id });\n//     });\n//     //   handleSearchResponse(res, rows);\n//   } catch (e) {\n//     //   handleSearchResponse(res, null, error);\n//   }\n// };\n\n/**\n * FQcommonArray 타입\n */\n\n\n/**\n * 공통으로 사용하는 collection 조회\n */\nconst FQcommonArray = async params => {\n  try {\n    const arrComms = params.map(async param => {\n      const snapshots = await dbSvc.collection(param.doc).orderBy(param.orderBy).get();\n      let rows = [];\n      snapshots.forEach(snap => {\n        const childData = snap.data();\n        const id = snap.id;\n        rows.push({ ...childData,\n          key: id\n        });\n      });\n      let arrReturnVal = {};\n      arrReturnVal[param.doc] = rows;\n      return arrReturnVal;\n    });\n    const arrCommons = await Promise.all(arrComms);\n    let commonObj = {};\n\n    for (let i = 0; i < arrCommons.length; i++) {\n      const key = Object.keys(arrCommons[i])[0];\n      commonObj[key] = arrCommons[i][key];\n    }\n\n    commonObj[\"category\"].unshift({\n      category_cd: 0,\n      category_nm: \"No Mapping\",\n      key: \"0\"\n    });\n    return commonObj;\n  } catch (err) {\n    console.log(err);\n    return null;\n  }\n}; // optimized pagination\n\n\nconst FQsearchpage = async ({\n  col,\n  where,\n  startPage,\n  maxPage,\n  lastRow\n}) => {\n  try {\n    // console.log(col, where, startPage, maxPage, lastRow);\n    startPage = parseInt(startPage, 10);\n    maxPage = parseInt(maxPage, 10);\n    let rows = [];\n    let dbRef = dbSvc.collection(col); // let limitOrderBy = \"\";\n\n    where.forEach(field => {\n      const fieldKey = Object.keys(field)[0];\n\n      if (fieldKey) {\n        // if (limitOrderBy === \"\") {\n        //   limitOrderBy = fieldKey;\n        // }\n        const filter = Object.keys(field)[1] && field[Object.keys(field)[1]] || \"==\"; // console.log(filter);\n        // console.log(fieldKey, field[fieldKey]);\n\n        if (field[fieldKey] !== \"\" || filter !== \"==\") {\n          dbRef = dbRef.where(`${fieldKey}`, filter, field[fieldKey]);\n        }\n      }\n    });\n    let snapshot;\n\n    if (startPage === 0) {\n      snapshot = await dbRef.orderBy(\"created_at\", \"desc\").limit(maxPage).get(); // 1부터 들어오면 조건없이 start조건 없이 할것~!!!!\n    } else {\n      const lastDoc = await dbSvc.collection(col).doc(lastRow.key).get();\n      const next = dbRef.orderBy(\"created_at\", \"desc\").startAfter(lastDoc).limit(maxPage);\n      snapshot = await next.get();\n    }\n\n    snapshot.forEach(doc => {\n      const childData = doc.data();\n      const id = doc.id;\n      rows.push({ ...childData,\n        key: id\n      });\n    });\n    return rows;\n  } catch (err) {\n    console.log(err);\n    return [];\n  }\n};\n\nconst FQsave = async ({\n  col,\n  params\n}) => {\n  try {\n    const doc = dbSvc.collection(col).doc(); // 문서번호 자동 채번\n\n    await doc.set({ ...params\n    }); // handleCudResponse(res);\n  } catch (error) {// handleCudResponse(res, error);\n  }\n};\n\nconst FQupdate = async ({\n  col,\n  doc,\n  params\n}) => {\n  // console.log(col, doc, params);\n  doc = doc.replace(/ /g, \"\");\n\n  try {\n    await dbSvc.collection(col).doc(doc).set({ ...params\n    }, {\n      merge: true\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst FQdelete = async ({\n  col,\n  doc\n}) => {\n  doc = doc.replace(/ /g, \"\");\n\n  try {\n    await dbSvc.collection(col).doc(doc).delete();\n  } catch (err) {\n    console.log(err);\n  }\n};\n/**\n * Geopoint\n * @param latitude\n * @param longitude\n */\n\n\nconst FQGeoPoint = (latitude, longitude) => {\n  if (!latitude || !longitude) {\n    return null;\n  } else {\n    return new dbSvcProps.GeoPoint(parseFloat(latitude), parseFloat(longitude));\n  }\n};\n/**\n * Timestamp Now\n */\n\n\nconst FQtimestampNow = () => dbSvcProps.Timestamp.now();\n/**\n * get image url\n */\n\n\nconst downloadImageToStorage = async photos => {\n  const arrPhotoUrl = photos.map(async photo => {\n    const photoUrl = await storageSvc.ref(photo).getDownloadURL();\n    return {\n      img: photoUrl,\n      orgImg: photo\n    };\n  });\n  const arrPhoto = await Promise.all(arrPhotoUrl);\n  return arrPhoto;\n};\n/**\n * upload image files\n */\n\n\nconst uploadImageToStorage = async photos => {\n  const arrUploadImg = photos.map(async photo => {\n    const uuid4 = uuidv4();\n    const imgUrl = `places/${uuid4}/${uuid4}_01.${photo.ext}`;\n    const attachmentRef = storageSvc.ref().child(imgUrl);\n    await attachmentRef.putString(photo.img, \"data_url\");\n    return imgUrl;\n  });\n  const resultImgUrls = await Promise.all(arrUploadImg);\n  return resultImgUrls;\n};\n\nconst deleteImageToStorage = async refUrl => {\n  await storageSvc.refFromURL(refUrl).delete();\n};\n\nexport { FQcheckUser, FQcommonArray, FQsearchpage, FQsave, FQupdate, FQdelete, FQGeoPoint, FQtimestampNow, downloadImageToStorage, uploadImageToStorage, deleteImageToStorage };","map":{"version":3,"sources":["C:/Users/maipc3/Desktop/branchfor2live/maiway-dev/src/fQuery.tsx"],"names":["dbSvc","dbSvcProps","storageSvc","v4","uuidv4","FQcheckUser","uid","rows","snapshot","collection","where","get","forEach","doc","childData","data","push","err","console","log","FQcommonArray","params","arrComms","map","param","snapshots","orderBy","snap","id","key","arrReturnVal","arrCommons","Promise","all","commonObj","i","length","Object","keys","unshift","category_cd","category_nm","FQsearchpage","col","startPage","maxPage","lastRow","parseInt","dbRef","field","fieldKey","filter","limit","lastDoc","next","startAfter","FQsave","set","error","FQupdate","replace","merge","FQdelete","delete","FQGeoPoint","latitude","longitude","GeoPoint","parseFloat","FQtimestampNow","Timestamp","now","downloadImageToStorage","photos","arrPhotoUrl","photo","photoUrl","ref","getDownloadURL","img","orgImg","arrPhoto","uploadImageToStorage","arrUploadImg","uuid4","imgUrl","ext","attachmentRef","child","putString","resultImgUrls","deleteImageToStorage","refUrl","refFromURL"],"mappings":"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","sourcesContent":["import { dbSvc } from \"./fBase\";\nimport { dbSvcProps, storageSvc } from \"./fBase\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { AttachmentType } from \"./components/Places/PlacesPopup\";\n\nconst FQcheckUser = async (uid: string) => {\n  try {\n    let rows: any = [];\n\n    const snapshot = await dbSvc\n      .collection(\"users\")\n      .where(\"uid\", \"==\", uid)\n      .get();\n\n    snapshot.forEach((doc) => {\n      const childData = doc.data();\n      rows.push({ ...childData });\n    });\n    return rows;\n    //   handleSearchResponse(res, rows);\n  } catch (err) {\n    console.log(err);\n    return [];\n    //   handleSearchResponse(res, null, error);\n  }\n};\n\n// const FQcommon = async (doc: string) => {\n//   try {\n//     let rows = [];\n\n//     const snapshot = await dbSvc.collection(doc).get();\n\n//     snapshot.forEach((doc) => {\n//       const childData = doc.data();\n//       const id = doc.id;\n//       rows.push({ ...childData, key: id });\n//     });\n\n//     //   handleSearchResponse(res, rows);\n//   } catch (e) {\n//     //   handleSearchResponse(res, null, error);\n//   }\n// };\n\n/**\n * FQcommonArray 타입\n */\ninterface FQcommonArrayProps {\n  doc: string;\n  orderBy: string;\n}\n\n/**\n * 공통으로 사용하는 collection 조회\n */\nconst FQcommonArray = async (params: FQcommonArrayProps[]) => {\n  try {\n    const arrComms = params.map(async (param: FQcommonArrayProps) => {\n      const snapshots = await dbSvc\n        .collection(param.doc)\n        .orderBy(param.orderBy)\n        .get();\n      let rows: any = [];\n      snapshots.forEach((snap) => {\n        const childData = snap.data();\n        const id = snap.id;\n        rows.push({ ...childData, key: id });\n      });\n      let arrReturnVal: any = {};\n      arrReturnVal[param.doc] = rows;\n      return arrReturnVal;\n    });\n\n    const arrCommons = await Promise.all(arrComms);\n\n    let commonObj: any = {};\n    for (let i = 0; i < arrCommons.length; i++) {\n      const key = Object.keys(arrCommons[i])[0];\n      commonObj[key] = arrCommons[i][key];\n    }\n    commonObj[\"category\"].unshift({\n      category_cd: 0,\n      category_nm: \"No Mapping\",\n      key: \"0\",\n    });\n    return commonObj;\n  } catch (err) {\n    console.log(err);\n    return null;\n  }\n};\n\n// optimized pagination\nconst FQsearchpage = async ({\n  col,\n  where,\n  startPage,\n  maxPage,\n  lastRow,\n}: any) => {\n  try {\n    // console.log(col, where, startPage, maxPage, lastRow);\n    startPage = parseInt(startPage, 10);\n    maxPage = parseInt(maxPage, 10);\n    let rows: any = [];\n    let dbRef: any = dbSvc.collection(col);\n\n    // let limitOrderBy = \"\";\n    where.forEach((field: any) => {\n      const fieldKey = Object.keys(field)[0];\n      if (fieldKey) {\n        // if (limitOrderBy === \"\") {\n        //   limitOrderBy = fieldKey;\n        // }\n        const filter =\n          (Object.keys(field)[1] && field[Object.keys(field)[1]]) || \"==\";\n        // console.log(filter);\n        // console.log(fieldKey, field[fieldKey]);\n        if (field[fieldKey] !== \"\" || filter !== \"==\") {\n          dbRef = dbRef.where(`${fieldKey}`, filter, field[fieldKey]);\n        }\n      }\n    });\n\n    let snapshot;\n    if (startPage === 0) {\n      snapshot = await dbRef.orderBy(\"created_at\", \"desc\").limit(maxPage).get(); // 1부터 들어오면 조건없이 start조건 없이 할것~!!!!\n    } else {\n      const lastDoc = await dbSvc.collection(col).doc(lastRow.key).get();\n      const next = dbRef\n        .orderBy(\"created_at\", \"desc\")\n        .startAfter(lastDoc)\n        .limit(maxPage);\n      snapshot = await next.get();\n    }\n\n    snapshot.forEach((doc: any) => {\n      const childData = doc.data();\n      const id = doc.id;\n      rows.push({ ...childData, key: id });\n    });\n    return rows;\n  } catch (err) {\n    console.log(err);\n    return [];\n  }\n};\n\nconst FQsave = async ({ col, params }: any) => {\n  try {\n    const doc = dbSvc.collection(col).doc(); // 문서번호 자동 채번\n\n    await doc.set({\n      ...params,\n    });\n\n    // handleCudResponse(res);\n  } catch (error) {\n    // handleCudResponse(res, error);\n  }\n};\n\nconst FQupdate = async ({ col, doc, params }: any) => {\n  // console.log(col, doc, params);\n  doc = doc.replace(/ /g, \"\");\n  try {\n    await dbSvc\n      .collection(col)\n      .doc(doc)\n      .set(\n        {\n          ...params,\n        },\n        { merge: true }\n      );\n  } catch (err) {\n    console.log(err);\n  }\n};\n\ninterface FQdeleteProps {\n  col: string;\n  doc: string;\n}\nconst FQdelete = async ({ col, doc }: FQdeleteProps) => {\n  doc = doc.replace(/ /g, \"\");\n  try {\n    await dbSvc.collection(col).doc(doc).delete();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n/**\n * Geopoint\n * @param latitude\n * @param longitude\n */\nconst FQGeoPoint = (latitude: string, longitude: string) => {\n  if (!latitude || !longitude) {\n    return null;\n  } else {\n    return new dbSvcProps.GeoPoint(parseFloat(latitude), parseFloat(longitude));\n  }\n};\n\n/**\n * Timestamp Now\n */\nconst FQtimestampNow = () => dbSvcProps.Timestamp.now();\n\n/**\n * get image url\n */\nconst downloadImageToStorage = async (photos: string[]) => {\n  const arrPhotoUrl = photos.map(async (photo) => {\n    const photoUrl = await storageSvc.ref(photo).getDownloadURL();\n    return { img: photoUrl, orgImg: photo };\n  });\n\n  const arrPhoto = await Promise.all(arrPhotoUrl);\n  return arrPhoto;\n};\n\n/**\n * upload image files\n */\nconst uploadImageToStorage = async (photos: AttachmentType[]) => {\n  const arrUploadImg = photos.map(async (photo) => {\n    const uuid4 = uuidv4();\n    const imgUrl = `places/${uuid4}/${uuid4}_01.${photo.ext}`;\n    const attachmentRef = storageSvc.ref().child(imgUrl);\n    await attachmentRef.putString(photo.img, \"data_url\");\n    return imgUrl;\n  });\n\n  const resultImgUrls = await Promise.all(arrUploadImg);\n  return resultImgUrls;\n};\n\nconst deleteImageToStorage = async (refUrl: string) => {\n  await storageSvc.refFromURL(refUrl).delete();\n};\n\nexport {\n  FQcheckUser,\n  FQcommonArray,\n  FQsearchpage,\n  FQsave,\n  FQupdate,\n  FQdelete,\n  FQGeoPoint,\n  FQtimestampNow,\n  downloadImageToStorage,\n  uploadImageToStorage,\n  deleteImageToStorage,\n};\n"]},"metadata":{},"sourceType":"module"}