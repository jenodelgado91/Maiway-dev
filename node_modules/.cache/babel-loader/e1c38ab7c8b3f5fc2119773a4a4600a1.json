{"ast":null,"code":"import { FQcommonArray } from \"../fQuery\";\nimport getCmmnData from \"./cmmnArrayData\";\nconst CMMN_ARRAY_LOADING = \"CMMN_ARRAY_LOADING\";\nconst CMMN_ARRAY_SEARCH = \"CMMN_ARRAY_SEARCH\";\nconst CMMN_ARRAY_GET = \"CMMN_ARRAY_GET\";\nconst CMMN_ARRAY_FAILED = \"CMMN_ARRAY_FAILED\";\n\nconst loadingCmmnArrayAction = () => ({\n  type: CMMN_ARRAY_LOADING,\n  payload: \"\"\n});\n\nconst searchCmmArrayAction = data => ({\n  type: CMMN_ARRAY_SEARCH,\n  payload: data\n});\n\nconst getCmmArrayAction = data => ({\n  type: CMMN_ARRAY_GET,\n  payload: data\n});\n\nconst failedCmmArrayAction = () => ({\n  type: CMMN_ARRAY_FAILED,\n  payload: \"\"\n});\n\n// search action\nexport const searchCmmnArrayRequest = params => {\n  return async dispatch => {\n    dispatch(loadingCmmnArrayAction());\n\n    try {\n      const result = await FQcommonArray(params);\n      dispatch(searchCmmArrayAction(result));\n    } catch (e) {\n      dispatch(failedCmmArrayAction());\n    }\n  };\n}; // get common data\n\nexport const getCmmnArrayRequest = () => {\n  return dispatch => {\n    dispatch(getCmmArrayAction(getCmmnData()));\n  };\n};\nconst initState = {\n  status: \"\",\n  rowData: null\n}; // reducer\n\nconst fsCmmnArrayReducer = (state = initState, action) => {\n  switch (action.type) {\n    case CMMN_ARRAY_LOADING:\n      return {\n        status: \"WAITING\"\n      };\n\n    case CMMN_ARRAY_SEARCH:\n    case CMMN_ARRAY_GET:\n      return {\n        status: \"SUCCESS\",\n        rowData: action.payload\n      };\n\n    case CMMN_ARRAY_FAILED:\n      return {\n        status: \"FAILURE\"\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default fsCmmnArrayReducer;","map":{"version":3,"sources":["C:/Users/maipc3/Desktop/branchfor2live/maiway-dev/src/store/fsCmmnArrayReducer.tsx"],"names":["FQcommonArray","getCmmnData","CMMN_ARRAY_LOADING","CMMN_ARRAY_SEARCH","CMMN_ARRAY_GET","CMMN_ARRAY_FAILED","loadingCmmnArrayAction","type","payload","searchCmmArrayAction","data","getCmmArrayAction","failedCmmArrayAction","searchCmmnArrayRequest","params","dispatch","result","e","getCmmnArrayRequest","initState","status","rowData","fsCmmnArrayReducer","state","action"],"mappings":"AAAA,SAASA,aAAT,QAA8B,WAA9B;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AAEA,MAAMC,kBAAkB,GAAG,oBAA3B;AACA,MAAMC,iBAAiB,GAAG,mBAA1B;AACA,MAAMC,cAAc,GAAG,gBAAvB;AACA,MAAMC,iBAAiB,GAAG,mBAA1B;;AAEA,MAAMC,sBAAsB,GAAG,OAAO;AACpCC,EAAAA,IAAI,EAAEL,kBAD8B;AAEpCM,EAAAA,OAAO,EAAE;AAF2B,CAAP,CAA/B;;AAKA,MAAMC,oBAAoB,GAAIC,IAAD,KAAgB;AAC3CH,EAAAA,IAAI,EAAEJ,iBADqC;AAE3CK,EAAAA,OAAO,EAAEE;AAFkC,CAAhB,CAA7B;;AAKA,MAAMC,iBAAiB,GAAID,IAAD,KAAgB;AACxCH,EAAAA,IAAI,EAAEH,cADkC;AAExCI,EAAAA,OAAO,EAAEE;AAF+B,CAAhB,CAA1B;;AAKA,MAAME,oBAAoB,GAAG,OAAO;AAClCL,EAAAA,IAAI,EAAEF,iBAD4B;AAElCG,EAAAA,OAAO,EAAE;AAFyB,CAAP,CAA7B;;AAWA;AACA,OAAO,MAAMK,sBAAsB,GAAIC,MAAD,IAAiB;AACrD,SAAO,MAAOC,QAAP,IAAyB;AAC9BA,IAAAA,QAAQ,CAACT,sBAAsB,EAAvB,CAAR;;AACA,QAAI;AACF,YAAMU,MAAM,GAAG,MAAMhB,aAAa,CAACc,MAAD,CAAlC;AACAC,MAAAA,QAAQ,CAACN,oBAAoB,CAACO,MAAD,CAArB,CAAR;AACD,KAHD,CAGE,OAAOC,CAAP,EAAU;AACVF,MAAAA,QAAQ,CAACH,oBAAoB,EAArB,CAAR;AACD;AACF,GARD;AASD,CAVM,C,CAYP;;AACA,OAAO,MAAMM,mBAAmB,GAAG,MAAM;AACvC,SAAQH,QAAD,IAAmB;AACxBA,IAAAA,QAAQ,CAACJ,iBAAiB,CAACV,WAAW,EAAZ,CAAlB,CAAR;AACD,GAFD;AAGD,CAJM;AAWP,MAAMkB,SAAqB,GAAG;AAC5BC,EAAAA,MAAM,EAAE,EADoB;AAE5BC,EAAAA,OAAO,EAAE;AAFmB,CAA9B,C,CAKA;;AACA,MAAMC,kBAAkB,GAAG,CAACC,KAAK,GAAGJ,SAAT,EAAoBK,MAApB,KAA2C;AACpE,UAAQA,MAAM,CAACjB,IAAf;AACE,SAAKL,kBAAL;AACE,aAAO;AAAEkB,QAAAA,MAAM,EAAE;AAAV,OAAP;;AACF,SAAKjB,iBAAL;AACA,SAAKC,cAAL;AACE,aAAO;AACLgB,QAAAA,MAAM,EAAE,SADH;AAELC,QAAAA,OAAO,EAAEG,MAAM,CAAChB;AAFX,OAAP;;AAIF,SAAKH,iBAAL;AACE,aAAO;AACLe,QAAAA,MAAM,EAAE;AADH,OAAP;;AAGF;AACE,aAAOG,KAAP;AAdJ;AAgBD,CAjBD;;AAmBA,eAAeD,kBAAf","sourcesContent":["import { FQcommonArray } from \"../fQuery\";\nimport getCmmnData from \"./cmmnArrayData\";\n\nconst CMMN_ARRAY_LOADING = \"CMMN_ARRAY_LOADING\" as const;\nconst CMMN_ARRAY_SEARCH = \"CMMN_ARRAY_SEARCH\" as const;\nconst CMMN_ARRAY_GET = \"CMMN_ARRAY_GET\" as const;\nconst CMMN_ARRAY_FAILED = \"CMMN_ARRAY_FAILED\" as const;\n\nconst loadingCmmnArrayAction = () => ({\n  type: CMMN_ARRAY_LOADING,\n  payload: \"\",\n});\n\nconst searchCmmArrayAction = (data: any) => ({\n  type: CMMN_ARRAY_SEARCH,\n  payload: data,\n});\n\nconst getCmmArrayAction = (data: any) => ({\n  type: CMMN_ARRAY_GET,\n  payload: data,\n});\n\nconst failedCmmArrayAction = () => ({\n  type: CMMN_ARRAY_FAILED,\n  payload: \"\",\n});\n\nexport type actionType =\n  | ReturnType<typeof loadingCmmnArrayAction>\n  | ReturnType<typeof searchCmmArrayAction>\n  | ReturnType<typeof getCmmArrayAction>\n  | ReturnType<typeof failedCmmArrayAction>;\n\n// search action\nexport const searchCmmnArrayRequest = (params: any) => {\n  return async (dispatch: any) => {\n    dispatch(loadingCmmnArrayAction());\n    try {\n      const result = await FQcommonArray(params);\n      dispatch(searchCmmArrayAction(result));\n    } catch (e) {\n      dispatch(failedCmmArrayAction());\n    }\n  };\n};\n\n// get common data\nexport const getCmmnArrayRequest = () => {\n  return (dispatch: any) => {\n    dispatch(getCmmArrayAction(getCmmnData()));\n  };\n};\n\nexport interface StateProps {\n  status: string;\n  rowData?: any;\n}\n\nconst initState: StateProps = {\n  status: \"\",\n  rowData: null,\n};\n\n// reducer\nconst fsCmmnArrayReducer = (state = initState, action: actionType) => {\n  switch (action.type) {\n    case CMMN_ARRAY_LOADING:\n      return { status: \"WAITING\" };\n    case CMMN_ARRAY_SEARCH:\n    case CMMN_ARRAY_GET:\n      return {\n        status: \"SUCCESS\",\n        rowData: action.payload,\n      };\n    case CMMN_ARRAY_FAILED:\n      return {\n        status: \"FAILURE\",\n      };\n    default:\n      return state;\n  }\n};\n\nexport default fsCmmnArrayReducer;\n"]},"metadata":{},"sourceType":"module"}